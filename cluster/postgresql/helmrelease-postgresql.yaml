apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: postgresql
  namespace: postgresql
spec:
  chart:
    spec:
      chart: postgresql
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  interval: 15m0s
  timeout: 5m
  releaseName: postgresql
  values:
    # Copyright VMware, Inc.
    # SPDX-License-Identifier: APACHE-2.0

    ## @section Global parameters
    ## Please, note that this will override the parameters, including dependencies, configured to use the global value
    ##
    global:
      ## @param global.imageRegistry Global Docker image registry
      ##
      imageRegistry: ""
      ## @param global.imagePullSecrets Global Docker registry secret names as an array
      ## e.g.
      ## imagePullSecrets:
      ##   - myRegistryKeySecretName
      ##
      imagePullSecrets: []
      ## @param global.storageClass Global StorageClass for Persistent Volume(s)
      ##
      storageClass: ""
      postgresql:
        ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
        ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
        ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
        ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
        ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
        ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
        ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
        ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
        ##
        #auth:
        #  #postgresPassword: ""
        #  username: "clortox"
        #    #password: ""
        #  database: ""
        #  existingSecret: "postgresql-default-credentials"
        #  secretKeys:
        #    adminPasswordKey: "postgres-password"
        #    userPasswordKey: "password"
        #    replicationPasswordKey: ""
        ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
        ##
        service:
          ports:
            postgresql: ""

    ## @section Common parameters
    ##

    ## @param kubeVersion Override Kubernetes version
    ##
    kubeVersion: ""
    ## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
    ##
    nameOverride: ""
    ## @param fullnameOverride String to fully override common.names.fullname template
    ##
    fullnameOverride: ""
    ## @param clusterDomain Kubernetes Cluster Domain
    ##
    clusterDomain: cluster.local
    ## @param extraDeploy Array of extra objects to deploy with the release (evaluated as a template)
    ##
    extraDeploy: []
    ## @param commonLabels Add labels to all the deployed resources
    ##
    commonLabels: {}
    ## @param commonAnnotations Add annotations to all the deployed resources
    ##
    commonAnnotations: {}
    ## Enable diagnostic mode in the statefulset
    ##
    diagnosticMode:
      ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
      ##
      enabled: false
      ## @param diagnosticMode.command Command to override all containers in the statefulset
      ##
      command:
        - sleep
      ## @param diagnosticMode.args Args to override all containers in the statefulset
      ##
      args:
        - infinity

    ## @section PostgreSQL common parameters
    ##

    ## Bitnami PostgreSQL image version
    ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
    ## @param image.registry PostgreSQL image registry
    ## @param image.repository PostgreSQL image repository
    ## @param image.tag PostgreSQL image tag (immutable tags are recommended)
    ## @param image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param image.pullPolicy PostgreSQL image pull policy
    ## @param image.pullSecrets Specify image pull secrets
    ## @param image.debug Specify if debug values should be set
    ##
    image:
      #registry: git.clortox.com
      #repository: infrastructure/gluttony-cluster-postgresql
      #tag: v1.2.0
      digest: ""
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
      ## Set to true if you would like to see extra information on logs
      ##
      debug: false
    ## Authentication parameters
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#setting-the-root-password-on-first-run
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-on-first-run
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-user-on-first-run
    ##
    auth:
      ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
      ##
      enablePostgresUser: true
      ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
      ##
      postgresPassword: ""
      ## @param auth.username Name for a custom user to create
      ##
      username: "clortox"
      ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` is provided
      ##
      password: ""
      ## @param auth.database Name for a custom database to create
      ##
      database: ""
      ## @param auth.replicationUsername Name of the replication user
      ##
      replicationUsername: repl_user
      ## @param auth.replicationPassword Password for the replication user. Ignored if `auth.existingSecret` is provided
      ##
      replicationPassword: ""
      ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
      ##
      existingSecret: "postgresql-default-credentials"
      ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
      ##
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
        #replicationPasswordKey: replication-password
      ## @param auth.usePasswordFiles Mount credentials as a files instead of using an environment variable
      ##
      usePasswordFiles: false
    ## @param architecture PostgreSQL architecture (`standalone` or `replication`)
    ##
    architecture: standalone
    ## Replication configuration
    ## Ignored if `architecture` is `standalone`
    ##
    replication:
      ## @param replication.synchronousCommit Set synchronous commit mode. Allowed values: `on`, `remote_apply`, `remote_write`, `local` and `off`
      ## @param replication.numSynchronousReplicas Number of replicas that will have synchronous replication. Note: Cannot be greater than `readReplicas.replicaCount`.
      ## ref: https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT
      ##
      synchronousCommit: "off"
      numSynchronousReplicas: 0
      ## @param replication.applicationName Cluster application name. Useful for advanced replication settings
      ##
      applicationName: my_application
    ## @param containerPorts.postgresql PostgreSQL container port
    ##
    containerPorts:
      postgresql: 5432
    ## Audit settings
    ## https://github.com/bitnami/containers/tree/main/bitnami/postgresql#auditing
    ## @param audit.logHostname Log client hostnames
    ## @param audit.logConnections Add client log-in operations to the log file
    ## @param audit.logDisconnections Add client log-outs operations to the log file
    ## @param audit.pgAuditLog Add operations to log using the pgAudit extension
    ## @param audit.pgAuditLogCatalog Log catalog using pgAudit
    ## @param audit.clientMinMessages Message log level to share with the user
    ## @param audit.logLinePrefix Template for log line prefix (default if not set)
    ## @param audit.logTimezone Timezone for the log timestamps
    ##
    audit:
      logHostname: false
      logConnections: false
      logDisconnections: false
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
      clientMinMessages: error
      logLinePrefix: ""
      logTimezone: ""
    ## LDAP configuration
    ## @param ldap.enabled Enable LDAP support
    ## DEPRECATED ldap.url It will removed in a future, please use 'ldap.uri' instead
    ## @param ldap.server IP address or name of the LDAP server.
    ## @param ldap.port Port number on the LDAP server to connect to
    ## @param ldap.prefix String to prepend to the user name when forming the DN to bind
    ## @param ldap.suffix String to append to the user name when forming the DN to bind
    ## DEPRECATED ldap.baseDN It will removed in a future, please use 'ldap.basedn' instead
    ## DEPRECATED ldap.bindDN It will removed in a future, please use 'ldap.binddn' instead
    ## DEPRECATED ldap.bind_password It will removed in a future, please use 'ldap.bindpw' instead
    ## @param ldap.basedn Root DN to begin the search for the user in
    ## @param ldap.binddn DN of user to bind to LDAP
    ## @param ldap.bindpw Password for the user to bind to LDAP
    ## DEPRECATED ldap.search_attr It will removed in a future, please use 'ldap.searchAttribute' instead
    ## DEPRECATED ldap.search_filter It will removed in a future, please use 'ldap.searchFilter' instead
    ## @param ldap.searchAttribute Attribute to match against the user name in the search
    ## @param ldap.searchFilter The search filter to use when doing search+bind authentication
    ## @param ldap.scheme Set to `ldaps` to use LDAPS
    ## DEPRECATED ldap.tls as string is deprecated please use 'ldap.tls.enabled' instead
    ## @param ldap.tls.enabled Se to true to enable TLS encryption
    ##
    ldap:
      enabled: false
      server: ""
      port: ""
      prefix: ""
      suffix: ""
      basedn: ""
      binddn: ""
      bindpw: ""
      searchAttribute: ""
      searchFilter: ""
      scheme: ""
      tls:
        enabled: false
      ## @param ldap.uri LDAP URL beginning in the form `ldap[s]://host[:port]/basedn`. If provided, all the other LDAP parameters will be ignored.
      ## Ref: https://www.postgresql.org/docs/current/auth-ldap.html
      ##
      uri: ""
    ## @param postgresqlDataDir PostgreSQL data dir folder
    ##
    postgresqlDataDir: /bitnami/postgresql/data
    ## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
    ##
    postgresqlSharedPreloadLibraries: "pgaudit"
    ## Start PostgreSQL pod(s) without limitations on shm memory.
    ## By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
    ## ref: https://github.com/docker-library/postgres/issues/416
    ## ref: https://github.com/containerd/containerd/issues/3654
    ##
    shmVolume:
      ## @param shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
      ##
      enabled: true
      ## @param shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
      ## Note: the size of the tmpfs counts against container's memory limit
      ## e.g:
      ## sizeLimit: 1Gi
      ##
      sizeLimit: ""
    ## TLS configuration
    ##
    tls:
      ## @param tls.enabled Enable TLS traffic support
      ##
      enabled: false
      ## @param tls.autoGenerated Generate automatically self-signed TLS certificates
      ##
      autoGenerated: false
      ## @param tls.preferServerCiphers Whether to use the server's TLS cipher preferences rather than the client's
      ##
      preferServerCiphers: true
      ## @param tls.certificatesSecret Name of an existing secret that contains the certificates
      ##
      certificatesSecret: ""
      ## @param tls.certFilename Certificate filename
      ##
      certFilename: ""
      ## @param tls.certKeyFilename Certificate key filename
      ##
      certKeyFilename: ""
      ## @param tls.certCAFilename CA Certificate filename
      ## If provided, PostgreSQL will authenticate TLS/SSL clients by requesting them a certificate
      ## ref: https://www.postgresql.org/docs/9.6/auth-methods.html
      ##
      certCAFilename: ""
      ## @param tls.crlFilename File containing a Certificate Revocation List
      ##
      crlFilename: ""

    ## @section PostgreSQL Primary parameters
    ##
    primary:
      ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
      ##
      name: primary
      ## @param primary.configuration PostgreSQL Primary main configuration to be injected as ConfigMap
      ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
      ##
      configuration: ""
      ## @param primary.pgHbaConfiguration PostgreSQL Primary client authentication configuration
      ## ref: https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html
      ## e.g:#
      ## pgHbaConfiguration: |-
      ##   local all all trust
      ##   host all all localhost trust
      ##   host mydatabase mysuser 192.168.0.0/24 md5
      ##
      pgHbaConfiguration: ""
      ## @param primary.existingConfigmap Name of an existing ConfigMap with PostgreSQL Primary configuration
      ## NOTE: `primary.configuration` and `primary.pgHbaConfiguration` will be ignored
      ##
      existingConfigmap: ""
      ## @param primary.extendedConfiguration Extended PostgreSQL Primary configuration (appended to main or default configuration)
      ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#allow-settings-to-be-loaded-from-files-other-than-the-default-postgresqlconf
      ##
      extendedConfiguration: ""
      ## @param primary.existingExtendedConfigmap Name of an existing ConfigMap with PostgreSQL Primary extended configuration
      ## NOTE: `primary.extendedConfiguration` will be ignored
      ##
      existingExtendedConfigmap: ""
      ## Initdb configuration
      ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#specifying-initdb-arguments
      ##
      initdb:
        ## @param primary.initdb.args PostgreSQL initdb extra arguments
        ##
        args: ""
        ## @param primary.initdb.postgresqlWalDir Specify a custom location for the PostgreSQL transaction log
        ##
        postgresqlWalDir: ""
        ## @param primary.initdb.scripts Dictionary of initdb scripts
        ## Specify dictionary of scripts to be run at first boot
        ## e.g:
        ## scripts:
        ##   my_init_script.sh: |
        ##      #!/bin/sh
        ##      echo "Do something."
        ##
        scripts: {}
        ## @param primary.initdb.scriptsConfigMap ConfigMap with scripts to be run at first boot
        ## NOTE: This will override `primary.initdb.scripts`
        ##
        scriptsConfigMap: ""
        ## @param primary.initdb.scriptsSecret Secret with scripts to be run at first boot (in case it contains sensitive information)
        ## NOTE: This can work along `primary.initdb.scripts` or `primary.initdb.scriptsConfigMap`
        ##
        scriptsSecret: ""
        ## @param primary.initdb.user Specify the PostgreSQL username to execute the initdb scripts
        ##
        user: ""
        ## @param primary.initdb.password Specify the PostgreSQL password to execute the initdb scripts
        ##
        password: ""
      ## Configure current cluster's primary server to be the standby server in other cluster.
      ## This will allow cross cluster replication and provide cross cluster high availability.
      ## You will need to configure pgHbaConfiguration if you want to enable this feature with local cluster replication enabled.
      ## @param primary.standby.enabled Whether to enable current cluster's primary as standby server of another cluster or not
      ## @param primary.standby.primaryHost The Host of replication primary in the other cluster
      ## @param primary.standby.primaryPort The Port of replication primary in the other cluster
      ##
      standby:
        enabled: false
        primaryHost: ""
        primaryPort: ""
      ## @param primary.extraEnvVars Array with extra environment variables to add to PostgreSQL Primary nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for PostgreSQL Primary nodes
      ##
      extraEnvVarsCM: ""
      ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for PostgreSQL Primary nodes
      ##
      extraEnvVarsSecret: ""
      ## @param primary.command Override default container command (useful when using custom images)
      ##
      command: []
      ## @param primary.args Override default container args (useful when using custom images)
      ##
      args: []
      ## Configure extra options for PostgreSQL Primary containers' liveness, readiness and startup probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
      ## @param primary.livenessProbe.enabled Enable livenessProbe on PostgreSQL Primary containers
      ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 6
        successThreshold: 1
      ## @param primary.readinessProbe.enabled Enable readinessProbe on PostgreSQL Primary containers
      ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
      ##
      readinessProbe:
        enabled: true
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 6
        successThreshold: 1
      ## @param primary.startupProbe.enabled Enable startupProbe on PostgreSQL Primary containers
      ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 15
        successThreshold: 1
      ## @param primary.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param primary.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param primary.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## @param primary.lifecycleHooks for the PostgreSQL Primary container to automate configuration before or after startup
      ##
      lifecycleHooks: {}
      ## PostgreSQL Primary resource requests and limits
      ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
      ## @param primary.resources.limits The resources limits for the PostgreSQL Primary containers
      ## @param primary.resources.requests.memory The requested memory for the PostgreSQL Primary containers
      ## @param primary.resources.requests.cpu The requested cpu for the PostgreSQL Primary containers
      ##
      resources:
        limits: {}
        requests:
          memory: 256Mi
          cpu: 250m
      ## Pod Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      ## @param primary.podSecurityContext.enabled Enable security context
      ## @param primary.podSecurityContext.fsGroup Group ID for the pod
      ##
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      ## Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      ## @param primary.containerSecurityContext.enabled Enable container security context
      ## @param primary.containerSecurityContext.runAsUser User ID for the container
      ## @param primary.containerSecurityContext.runAsGroup Group ID for the container
      ## @param primary.containerSecurityContext.runAsNonRoot Set runAsNonRoot for the container
      ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set allowPrivilegeEscalation for the container
      ## @param primary.containerSecurityContext.seccompProfile.type Set seccompProfile.type for the container
      ## @param primary.containerSecurityContext.capabilities.drop Set capabilities.drop for the container
      ##
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 0
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL
      ## @param primary.hostAliases PostgreSQL primary pods host aliases
      ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
      ##
      hostAliases: []
      ## @param primary.hostNetwork Specify if host network should be enabled for PostgreSQL pod (postgresql primary)
      ##
      hostNetwork: false
      ## @param primary.hostIPC Specify if host IPC should be enabled for PostgreSQL pod (postgresql primary)
      ##
      hostIPC: false
      ## @param primary.labels Map of labels to add to the statefulset (postgresql primary)
      ##
      labels: {}
      ## @param primary.annotations Annotations for PostgreSQL primary pods
      ##
      annotations: {}
      ## @param primary.podLabels Map of labels to add to the pods (postgresql primary)
      ##
      podLabels: {}
      ## @param primary.podAnnotations Map of annotations to add to the pods (postgresql primary)
      ##
      podAnnotations: {}
      ## @param primary.podAffinityPreset PostgreSQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      ##
      podAffinityPreset: ""
      ## @param primary.podAntiAffinityPreset PostgreSQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      ##
      podAntiAffinityPreset: soft
      ## PostgreSQL Primary node affinity preset
      ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
      ##
      nodeAffinityPreset:
        ## @param primary.nodeAffinityPreset.type PostgreSQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
        ##
        type: ""
        ## @param primary.nodeAffinityPreset.key PostgreSQL primary node label key to match Ignored if `primary.affinity` is set.
        ## E.g.
        ## key: "kubernetes.io/e2e-az-name"
        ##
        key: ""
        ## @param primary.nodeAffinityPreset.values PostgreSQL primary node label values to match. Ignored if `primary.affinity` is set.
        ## E.g.
        ## values:
        ##   - e2e-az1
        ##   - e2e-az2
        ##
        values: []
      ## @param primary.affinity Affinity for PostgreSQL primary pods assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      ## Note: primary.podAffinityPreset, primary.podAntiAffinityPreset, and primary.nodeAffinityPreset will be ignored when it's set
      ##
      affinity: {}
      ## @param primary.nodeSelector Node labels for PostgreSQL primary pods assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      ##
      nodeSelector: {}
      ## @param primary.tolerations Tolerations for PostgreSQL primary pods assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      ##
      tolerations: []
      ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
      ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
      ##
      topologySpreadConstraints: []
      ## @param primary.priorityClassName Priority Class to use for each pod (postgresql primary)
      ##
      priorityClassName: ""
      ## @param primary.schedulerName Use an alternate scheduler, e.g. "stork".
      ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
      ##
      schedulerName: ""
      ## @param primary.terminationGracePeriodSeconds Seconds PostgreSQL primary pod needs to terminate gracefully
      ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
      ##
      terminationGracePeriodSeconds: ""
      ## @param primary.updateStrategy.type PostgreSQL Primary statefulset strategy type
      ## @param primary.updateStrategy.rollingUpdate PostgreSQL Primary statefulset rolling update configuration parameters
      ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
      ##
      updateStrategy:
        type: RollingUpdate
        rollingUpdate: {}
      ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the PostgreSQL Primary container(s)
      ##
      extraVolumeMounts: []
      ## @param primary.extraVolumes Optionally specify extra list of additional volumes for the PostgreSQL Primary pod(s)
      ##
      extraVolumes: []
      ## @param primary.sidecars Add additional sidecar containers to the PostgreSQL Primary pod(s)
      ## For example:
      ## sidecars:
      ##   - name: your-image-name
      ##     image: your-image
      ##     imagePullPolicy: Always
      ##     ports:
      ##       - name: portname
      ##         containerPort: 1234
      ##
      sidecars: []
      ## @param primary.initContainers Add additional init containers to the PostgreSQL Primary pod(s)
      ## Example
      ##
      ## initContainers:
      ##   - name: do-something
      ##     image: busybox
      ##     command: ['do', 'something']
      ##
      initContainers: []
      ## @param primary.extraPodSpec Optionally specify extra PodSpec for the PostgreSQL Primary pod(s)
      ##
      extraPodSpec: {}
      ## PostgreSQL Primary service configuration
      ##
      service:
        ## @param primary.service.type Kubernetes Service type
        ##
        type: ClusterIP
        ## @param primary.service.ports.postgresql PostgreSQL service port
        ##
        ports:
          postgresql: 5432
        ## Node ports to expose
        ## NOTE: choose port between <30000-32767>
        ## @param primary.service.nodePorts.postgresql Node port for PostgreSQL
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        ##
        nodePorts:
          postgresql: ""
        ## @param primary.service.clusterIP Static clusterIP or None for headless services
        ## e.g:
        ## clusterIP: None
        ##
        clusterIP: ""
        ## @param primary.service.annotations Annotations for PostgreSQL primary service
        ##
        annotations: {}
        ## @param primary.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
        ## Set the LoadBalancer service type to internal only
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
        ##
        loadBalancerIP: ""
        ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
        ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        ##
        externalTrafficPolicy: Cluster
        ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
        ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
        ##
        ## loadBalancerSourceRanges:
        ## - 10.10.10.0/24
        ##
        loadBalancerSourceRanges: []
        ## @param primary.service.extraPorts Extra ports to expose in the PostgreSQL primary service
        ##
        extraPorts: []
        ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
        ## If "ClientIP", consecutive client requests will be directed to the same Pod
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        ##
        sessionAffinity: None
        ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
        ## sessionAffinityConfig:
        ##   clientIP:
        ##     timeoutSeconds: 300
        ##
        sessionAffinityConfig: {}
        ## Headless service properties
        ##
        headless:
          ## @param primary.service.headless.annotations Additional custom annotations for headless PostgreSQL primary service
          ##
          annotations: {}
      ## PostgreSQL Primary persistence configuration
      ##
      persistence:
        ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
        ##
        enabled: true
        ## @param primary.persistence.existingClaim Name of an existing PVC to use
        ##
        existingClaim: "data-postgresql-pvc"
        ## @param primary.persistence.mountPath The path the volume will be mounted at
        ## Note: useful when using custom PostgreSQL images
        ##
        mountPath: /bitnami/postgresql
        ## @param primary.persistence.subPath The subdirectory of the volume to mount to
        ## Useful in dev environments and one PV for multiple services
        ##
        subPath: ""
        ## @param primary.persistence.storageClass PVC Storage Class for PostgreSQL Primary data volume
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        storageClass: "-"
        ## @param primary.persistence.accessModes PVC Access Mode for PostgreSQL volume
        ##
        accessModes:
          - ReadWriteMany
        ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
        ##
        size: 20Gi
        ## @param primary.persistence.annotations Annotations for the PVC
        ##
        annotations: {}
        ## @param primary.persistence.labels Labels for the PVC
        ##
        labels: {}
        ## @param primary.persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
        ## selector:
        ##   matchLabels:
        ##     app: my-app
        ##
        selector: {}
        ## @param primary.persistence.dataSource Custom PVC data source
        ##
        dataSource: {}
      ## PostgreSQL Primary Persistent Volume Claim Retention Policy
      ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
      ##
      persistentVolumeClaimRetentionPolicy:
        ## @param primary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Primary Statefulset
        ##
        enabled: true
        ## @param primary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
        ##
        whenScaled: Retain
        ## @param primary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
        ##
        whenDeleted: Retain

